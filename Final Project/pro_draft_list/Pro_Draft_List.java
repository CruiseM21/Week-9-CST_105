/*
 * Program: Pro Draft List
 * File: Pro_Draft_List.java
 * Summary: Display Select Player of GUI for Pro Draft List
 * Author: Vincent Christaldi
 * Date: 01/14/18
*/
package pro_draft_list;

import java.awt.*;
import javax.swing.*;
import java.util.ArrayList;
import java.util.logging.*;


/**
 *
 * @author Cruise McClarren
 */
public class Pro_Draft_List extends javax.swing.JFrame
{

    /**
     * Creates new form Pro_Draft_List
     */
    public Pro_Draft_List()
    {
        initComponents();
        this.getContentPane().setBackground(Color.green);
        //set icon image on title bar
        setIconImage(new ImageIcon(getClass().getResource("/images/PDLIcon.png")).getImage());
         //create array list of player objects
        ArrayList<NFL_Player> Players = new ArrayList<>();
        //call create players method
        PlayerManager.createPlayers(Players);
        
        
        //fill combo box with names of players
        for(int index = 0; index < Players.size(); ++index)
        {
            cbo_PlayerList.addItem(Players.get(index).getName());       
        }
    }

    /**
     *
     * @param Roster
     */
    public Pro_Draft_List(ArrayList Roster)
    {
        initComponents();
        this.getContentPane().setBackground(Color.green);
        //set icon image on title bar
        setIconImage(new ImageIcon(getClass().getResource("/images/PDLIcon.png")).getImage());
         //create array list of player objects
        ArrayList<NFL_Player> Players = new ArrayList<>();
        //call create players method
        PlayerManager.createPlayers(Players);
        
        
        //fill combo box with names of players
        for(int index = 0; index < Players.size(); ++index)
        {
            cbo_PlayerList.addItem(Players.get(index).getName());       
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        cbo_PlayerList = new javax.swing.JComboBox<>();
        label1 = new java.awt.Label();
        btn_Previous = new java.awt.Button();
        btn_Next = new java.awt.Button();
        btn_Main = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pro Draft List");
        setBackground(new java.awt.Color(255, 0, 0));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        label1.setAlignment(java.awt.Label.CENTER);
        label1.setBackground(java.awt.Color.green);
        label1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        label1.setText("Please Select A Player");

        btn_Previous.setBackground(new java.awt.Color(255, 0, 0));
        btn_Previous.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        btn_Previous.setForeground(new java.awt.Color(51, 0, 51));
        btn_Previous.setLabel("Previous");
        btn_Previous.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_PreviousActionPerformed(evt);
            }
        });

        btn_Next.setBackground(new java.awt.Color(0, 102, 204));
        btn_Next.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        btn_Next.setForeground(new java.awt.Color(204, 204, 0));
        btn_Next.setLabel("Next Step");
        btn_Next.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_NextActionPerformed(evt);
            }
        });

        btn_Main.setBackground(new java.awt.Color(255, 102, 255));
        btn_Main.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        btn_Main.setLabel("Main Menu");
        btn_Main.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_MainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_Previous, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Main, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Next, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21))
            .addGroup(layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(cbo_PlayerList, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbo_PlayerList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 146, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_Previous, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_Next, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(btn_Main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    //exit program
    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        Exit_Window ex = new Exit_Window();
        this.dispose();
        ex.setVisible(true);        
    }//GEN-LAST:event_formWindowClosing
    //return to Add_Player window
    private void btn_PreviousActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_PreviousActionPerformed
    {//GEN-HEADEREND:event_btn_PreviousActionPerformed
        Add_Player_Main apm = new Add_Player_Main();
        this.dispose();
        apm.setVisible(true);
    }//GEN-LAST:event_btn_PreviousActionPerformed
    //return to main window
    private void btn_MainActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_MainActionPerformed
    {//GEN-HEADEREND:event_btn_MainActionPerformed
        Main_Window mw = new Main_Window();
        this.dispose();
        mw.setVisible(true);
    }//GEN-LAST:event_btn_MainActionPerformed

    private void btn_NextActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_NextActionPerformed
    {//GEN-HEADEREND:event_btn_NextActionPerformed
        int index = 0;
        int Location;
        ArrayList<pro_draft_list.NFL_Player> Players = new ArrayList<>();
        //call create players method
        pro_draft_list.PlayerManager.createPlayers(Players);
        String Player_Name = (cbo_PlayerList.getSelectedItem().toString());
        int tacks = 0, f_Fmbs = 0, intcepts = 0;
        double avgYards = 0.0;
        String name = "", position = "", height = "", seasons1 = "";
        int age = 0, weight = 0, year = 0, seasons = 0;
        double avg_Yards = 0;
        if(Player_Name == "Darius Slay" || Player_Name == "Joe Schobert" || Player_Name == "Chandler Jones" || Player_Name == "Landon Collins" || Player_Name == "Tashaun Gipson")
        {
            
            switch(Player_Name)
        {
            case "Joe Schobert":
                tacks = 122;
                f_Fmbs = 3;
                avgYards = 2.5;
                intcepts = 1;
                year = 2016;
                index = 5;
                name = (Players.get(index).getName());
                position = (Players.get(index).getPosition());
                height = (Players.get(index).getHeight());
                age = (Players.get(index).getAge());
                weight = (Players.get(index).getWeight());
                break;
            case "Chandler Jones":
                tacks = 49;
                f_Fmbs = 2;
                avgYards = 14.0;
                intcepts = 0;
                year = 2012;
                index = 6;
                name = (Players.get(index).getName());
                position = (Players.get(index).getPosition());
                height = (Players.get(index).getHeight());
                age = (Players.get(index).getAge());
                weight = (Players.get(index).getWeight());
                break;
            case "Landon Collins":
                tacks = 102;
                f_Fmbs = 1;
                avgYards = 0.0;
                intcepts = 2;
                year = 2015;
                index = 7;
                name = (Players.get(index).getName());
                position = (Players.get(index).getPosition());
                height = (Players.get(index).getHeight());
                age = (Players.get(index).getAge());
                weight = (Players.get(index).getWeight());
                break;
            case "Darius Slay":
                tacks = 47;
                f_Fmbs = 0;
                avgYards = 0.0;
                intcepts = 5;
                year = 2013;
                index = 8;
                name = (Players.get(index).getName());
                position = (Players.get(index).getPosition());
                height = (Players.get(index).getHeight());
                age = (Players.get(index).getAge());
                weight = (Players.get(index).getWeight());
                break;
            case "Tashaun Gipson":
                tacks = 51;
                f_Fmbs = 0;
                avgYards = 0.0;
                intcepts = 4;
                year = 2012;
                index = 9;
                name = (Players.get(index).getName());
                position = (Players.get(index).getPosition());
                height = (Players.get(index).getHeight());
                age = (Players.get(index).getAge());
                weight = (Players.get(index).getWeight());
                break;
        }
            Defensive_Player DP = new Defensive_Player(name,position,height,age,weight,year,tacks, f_Fmbs, avgYards, intcepts);
            DP.setTackles(tacks);
            tacks = DP.getTackles();
            DP.setForced_Fumbles(f_Fmbs);
            f_Fmbs = DP.getForced_Fumbles();
            DP.setAvg_Yards(avgYards);
            avgYards = DP.getAvg_Yards();
            DP.setInterceptions(intcepts);
            intcepts = DP.getInterceptions();
            DP.setSeasons(year);
            seasons = DP.getSeasons();
                    
            
            seasons1 = (Integer.toString(seasons));
            String age1 = (Integer.toString(age));
            String weight1 = (Integer.toString(weight));
            String year1 = (Integer.toString(year));
            String tackles = (Integer.toString(tacks));
            String f_fumbles = (Integer.toString(f_Fmbs));
            String avg_Yards1 = (Double.toString(avgYards));
            String intcpts = (Integer.toString(intcepts));
            
            
            
            
           
            
            Player_Stats_Window psw = new Player_Stats_Window(name, position, height, age1, weight1, year1, tackles, f_fumbles, avg_Yards1, intcpts, seasons1);
            this.dispose();
            psw.setVisible(true); 
        }
        else
        {
            int totCarries = 0;
            int totYards = 0;
            int TDS = 0;
            int recepts = -1;
            double RTGS = -1;
            
             switch (Player_Name)
             {
                 case "Le'Veon Bell":
                    year = 2013;
                    totCarries = 283;
                    totYards = 1105;
                    avgYards = 3.9;
                    TDS = 7;            
                    index = 0;
                    name = (Players.get(index).getName());
                    position = (Players.get(index).getPosition());
                    height = (Players.get(index).getHeight());
                    age = (Players.get(index).getAge());
                    weight = (Players.get(index).getWeight());
                    
                     break;
                 case "Orleans Darkwa":
                     year = 2014;
                     totCarries = 236;
                     totYards = 580;
                     avgYards = 4.3;
                     TDS = 3; 
                     index = 1;
                     name = (Players.get(index).getName());
                     position = (Players.get(index).getPosition());
                     height = (Players.get(index).getHeight());
                     age = (Players.get(index).getAge());
                     weight = (Players.get(index).getWeight());
                     break;
                 case "Tom Brady":
                     year = 2000;
                     totCarries = -1;
                     recepts = -1;
                     totYards = 3865;
                     avgYards = -1;
                     intcepts = 6;
                     RTGS = 105.2;
                     TDS = 27;                      
                     index = 2;
                     name = (Players.get(index).getName());
                     position = (Players.get(index).getPosition());
                     height = (Players.get(index).getHeight());
                     age = (Players.get(index).getAge());
                     weight = (Players.get(index).getWeight());
                     break;
                 case "Antonio Brown":
                     year = 2010;
                     totCarries = 99;
                     totYards = 1105;
                     avgYards = 15.2;
                     TDS = 9; 
                     index = 3;
                     name = (Players.get(index).getName());
                     position = (Players.get(index).getPosition());
                     height = (Players.get(index).getHeight());
                     age = (Players.get(index).getAge());
                     weight = (Players.get(index).getWeight());
                     break;
                 case "Kareem Hunt":
                     year = 2017;
                     totCarries = 218;
                     totYards = 1046;
                     avgYards = 4.8;
                     TDS = 5; 
                     index = 4;
                     name = (Players.get(index).getName());
                     position = (Players.get(index).getPosition());
                     height = (Players.get(index).getHeight());
                     age = (Players.get(index).getAge());
                     weight = (Players.get(index).getWeight());
                     break;
             }
            
                Offensive_Player OP = new Offensive_Player(name, position, height, age, weight, year, totCarries, recepts, totYards, avg_Yards, intcepts, RTGS, TDS);
                OP.setCarries(totCarries);
                totCarries = OP.getCarries();
                OP.setTotal_Yards(totYards);
                totYards = OP.getTotal_Yards();
                OP.setAvg_Yards(avgYards);
                avgYards = OP.getAvg_Yards();
                OP.setTouchdowns(TDS);
                TDS = OP.getTouchdowns();
                OP.setYear(year);
                year = OP.getYear();
                seasons = 2018 - year;
                OP.setReceptions(recepts);
                recepts = OP.getReceptions();
                OP.setInterceptions(intcepts);
                intcepts = OP.getInterceptions();
                OP.setRunsToGoal(RTGS);
                RTGS = OP.getRunsToGoal();
                
                
                String age1 = (Integer.toString(age));
                String weight1 = (Integer.toString(weight));                
                String avg_Yards1 = (Double.toString(avgYards));
                String tot_Yards = (Integer.toString(totYards));
                String tot_Carries = (Integer.toString(totCarries));
                String TD = (Integer.toString(TDS));
                String year1 = (Integer.toString(year));
                String RTG = (Double.toString(RTGS));
                String intcpts = (Integer.toString(intcepts));
                String recpts = (Integer.toString(recepts));
                seasons1 = (Integer.toString(seasons));
                
                
                
                Player_Stats_Window1 psw1 = new Player_Stats_Window1(Player_Name, position, height, age1, weight1,avg_Yards1,tot_Carries, tot_Yards, year1, RTG, TD, intcpts, recpts, seasons1);
                this.dispose();
                psw1.setVisible(true);
            
        }
        
    }//GEN-LAST:event_btn_NextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Pro_Draft_List.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Pro_Draft_List.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Pro_Draft_List.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Pro_Draft_List.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Pro_Draft_List().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btn_Main;
    private java.awt.Button btn_Next;
    private java.awt.Button btn_Previous;
    private javax.swing.JComboBox<String> cbo_PlayerList;
    private java.awt.Label label1;
    // End of variables declaration//GEN-END:variables
}
